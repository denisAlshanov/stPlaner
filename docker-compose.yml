# St. Planer - YouTube Stream Planner
# Copy .env.example to .env and configure your environment variables
version: '3.8'

services:
  # PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: stPlaner-postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER: stplaner
      POSTGRES_PASSWORD: stplaner_password
      POSTGRES_DB: stplaner
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - stplaner-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stplaner -d stplaner"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Application
  stplaner:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: stPlaner-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    environment:
      # Server
      SERVER_PORT: 8080
      SERVER_HOST: 0.0.0.0
      
      # PostgreSQL
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: stplaner
      POSTGRES_PASSWORD: stplaner_password
      POSTGRES_DATABASE: stplaner
      POSTGRES_SSLMODE: disable
      
      # Storage (Mock for development)
      AWS_REGION: us-east-1
      S3_BUCKET_NAME: zing-ue1-prod-test
      
      # Telegram
      TELEGRAM_SESSION_FILE: /app/data/session.db
      
      # API
      API_KEY: dev-api-key-change-in-production
      JWT_SECRET: dev-jwt-secret-change-in-production
      RATE_LIMIT_REQUESTS: 100
      RATE_LIMIT_WINDOW: 1m
      
      # Download
      MAX_CONCURRENT_DOWNLOADS: 5
      DOWNLOAD_TIMEOUT: 300s
      MAX_FILE_SIZE: 2147483648
      
      # Logging
      LOG_LEVEL: info
    ports:
      - "8080:8080"
    volumes:
      - app_data:/app/data
    networks:
      - stplaner-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local
  app_data:
    driver: local

networks:
  stplaner-network:
    driver: bridge